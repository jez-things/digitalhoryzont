#!/usr/bin/env /usr/bin/python2.7
# -*- coding: utf-8 -*-
# -*- python -*-
#
# Cgminer plugin
#
# Optional configuration:
#
# [cgminer]
# env.host = 'localhost'
# env.port = 4028
#
#%# capabilities=autoconf
#%# family=auto

import os, sys, string, glob, socket, json
plugin_name=list(os.path.split(sys.argv[0]))[1]
plugin_version="0.1"
rpc_host = os.getenv("host", "127.0.0.1")
rpc_port = int(os.getenv("port", "4028"))
#rpc_host = "127.0.0.1"
#rpc_port = 4028;
DEBUG_MODE=0;

def cgminer_rpc(command):
   try:
      s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      s.connect((rpc_host, rpc_port))
      s.send(json.dumps({"command": command}))
      res = s.makefile().read()
      s.close()
      return json.loads(res.replace('\x00','')), None
   except socket.error as e:
      return None, str(e)

def config_munin_graphs(cg_devs):
    devno=0;
    if 'DEVS' in cg_devs:
        # Hashrate
        print('multigraph cgminer_hashrate')
        print('graph_category mining')
        print('graph_title Hashrate')
        print('graph_vlabel Hash/s')
        print('graph_args --base 1000 --lower-limit 0')
        devno=0;
        for dev in cg_devs['DEVS']:
            if 'Name' in dev:
                print('pga_'+str(devno)+'.label '+dev['Name'])
            else: # defaults to PGA device type
                print('pga_'+str(devno)+'.label PGA '+str(devno))
            print('pga_'+str(devno)+'.label PGA '+str(dev['Name']))
            print('pga_'+str(devno)+'.type DERIVE')
            print('pga_'+str(devno)+'.min 0')
            print('pga_'+str(devno)+'.draw '+("AREA" if dev==cg_devs['DEVS'][0] else "STACK"))
            devno+=1;

        # Accepted
        print('multigraph cgminer_accepted')
        print('graph_category mining')
        print('graph_title Accepted')
        print('graph_vlabel task')
        devno=0;
        for dev in cg_devs['DEVS']:
            print('pga_'+str(devno)+'.label '+dev['Name']+' '+str(devno))
            print('pga_'+str(devno)+'.type DERIVE')
            print('pga_'+str(devno)+'.min 0')
            devno+=1;
   
        # Rejected
        print('multigraph cgminer_rejected')
        print('graph_category mining')
        print('graph_title Rejected')
        print('graph_vlabel task')
        devno=0;
        for dev in cg_devs['DEVS']:
            print('pga_'+str(devno)+'.label '+dev['Name']+' '+str(devno))
            print('pga_'+str(devno)+'.type DERIVE')
            print('pga_'+str(devno)+'.min 0')
            devno+=1;

        # hwerrors
        print('multigraph cgminer_hwerrors')
        print('graph_category mining')
        print('graph_title Hardware Errors')
        print('graph_vlabel task')
        devno=0;
        for dev in cg_devs['DEVS']:
            print('pga_'+str(devno)+'.label '+dev['Name']+' '+str(devno))
            print('pga_'+str(devno)+'.type DERIVE')
            print('pga_'+str(devno)+'.min 0')
            devno+=1;

        # Utility
        print('multigraph cgminer_utility')
        print('graph_category mining')
        print('graph_title Utility')
        print('graph_vlabel task')
        devno=0;
        for dev in cg_devs['DEVS']:
            print('pga_'+str(devno)+'.label '+dev['Name']+' '+str(devno))
            print('pga_'+str(devno)+'.type GAUGE')
            print('pga_'+str(devno)+'.min 0')
            devno+=1;

        # Device Hardware %
        print('multigraph cgminer_devicehw')
        print('graph_category mining')
        print('graph_title Device Hardware %')
        print('graph_vlabel task')
        devno=0;
        for dev in cg_devs['DEVS']:
            print('pga_'+str(devno)+'.label '+dev['Name']+' '+str(devno))
            print('pga_'+str(devno)+'.type GAUGE')
            print('pga_'+str(devno)+'.min 0')
            devno+=1;

        # Device rejected % 
        print('multigraph cgminer_devicerej')
        print('graph_category mining')
        print('graph_title Device Rejected %')
        print('graph_vlabel task')
        devno=0;
        for dev in cg_devs['DEVS']:
            print('pga_'+str(devno)+'.label '+dev['Name']+' '+str(devno))
            print('pga_'+str(devno)+'.type GAUGE')
            devno+=1;

#######################################################################
# main
#######################################################################
devs, err = cgminer_rpc('devs')

arg = sys.argv[1] if len(sys.argv) == 2 else None
if arg == "config":
    config_munin_graphs(devs);
elif arg == "test":
    print('--------------------------------------------');
    if DEBUG_MODE > 0:
        print(devs)
        for dk in devs.keys():
            print("|dk devs[dk] %20s=%s" %(dk, devs[dk]));
    print('-------');
    if DEBUG_MODE > 0:
        print(devs['STATUS']);
    if devs['STATUS']:
        devno=0;
        for dk in devs['STATUS']:
            #print("| %20s" % (dk));
            for sk in dk.keys():
                print("|%d)\t%20s=%s" % (devno,sk,dk[sk]));
            devno+=1;

    #for dk in devs['STATUS'].keys():
    #    print("| %20s=%s" %(dk, devs['STATUS'][dk]));
    print('-------');

    if DEBUG_MODE > 0:
        print(devs['DEVS']);
    print('--------------------------------------------');
    if devs and DEBUG_MODE > 0:
        for dev in devs['DEVS']:
            print("\tdev: %s" % (devs));
    print('-------');
    devno=0;
    if devs:
        for dev in devs['DEVS']:
            for sk in dev.keys():
                print("|%d \t%20s=%s" %(devno,sk,dev[sk]));
        devno+=1;
    print('--------------------------------------------');

elif arg == "autoconf":
   if err:
      print("no ("+err+")")
   elif len(devs['DEVS']) == 0:
      print("no (no mining device found)")
   else:
      print("yes")
#elif arg == "suggest":
elif arg == "version":
   print(plugin_name+' Munin plugin, version '+plugin_version)
else:
   if devs:
      #print('multigraph cgminer_hashrate')
      devno=0;
      for dev in devs['DEVS']:
        if 'Total MH' in dev:
            print('multigraph cgminer_hashrate')
            print('pga_%d.value %d' % (devno, dev['Total MH']*1e6))

        if 'Accepted' in dev:
            print('multigraph cgminer_accepted')
            print('pga_%d.value %d' % (devno, dev['Accepted']))

        if 'Rejected' in dev:
            print('multigraph cgminer_rejected')
            print('pga_%d.value %d' % (devno, dev['Rejected']))

        if 'Hardware Errors' in dev:
            print('multigraph cgminer_hwerrors')
            print('pga_%d.value %d' % (devno, dev['Hardware Errors']))

        if 'Utility' in dev:
            print('multigraph cgminer_utility')
            print('pga_%d.value %f' % (devno, dev['Utility']))

        if 'Device Hardware%' in dev:
            print('multigraph cgminer_devicehw')
            print('pga_%d.value %f' % (devno, dev['Device Hardware%']))

        if 'Device Rejected%' in dev:
            print('multigraph cgminer_devicerej')
            print('pga_%d.value %f' % (devno, dev['Device Rejected%']))
        devno+=1;

